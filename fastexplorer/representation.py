# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_representation.ipynb (unless otherwise specified).

__all__ = ['Representation']

# Cell
from fastai2.vision.all import *

# Cell
class Representation:
    'Representation of a Learn object.'
    def __init__(self, data): self.data = data
    def __repr__(self): return f'{self.__class__.__name__} ()'

# Cell
@patch
def to_representation(self:Learner):
    "Gets a representation of the Learner to be passed to a web client."
    return Representation(self.model.to_representation('Model'))

# Cell
@patch
def to_representation(self:nn.Module, name=None, index=0):
    name = ifnone(name, self.__class__.__name__)
    res = {'name': name, 'index': index}
    res['type'] = 'Sequential' if isinstance(self, nn.Sequential) else 'Module'
    nodes,links = get_module_nodes(self)
    if len(nodes): res['nodes'] = nodes
    if len(links): res['links'] = links
    return res

# Cell
@typedispatch
def get_module_nodes(module:nn.Module):
    nodes,links = [],[]
    is_seq = isinstance(module, nn.Sequential)
    for i,(n,m) in enumerate(module.named_children()):
        if is_seq: n = f'{m.__class__.__name__}_{n}'
        nodes.append(m.to_representation(n,i))
        if i>0: links.append({'source':i-1, 'target':i})

    return nodes,links

# Cell
@patch
def to_json(self:Representation): return json.dumps(self.data)